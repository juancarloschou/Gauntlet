<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Centrar a los jugadores en la vista</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//centrar a los jugadores en la vista

//hago para un solo jugador al principio
iHeroe = instance_find(oHeroe, 0);
if(instance_exists(iHeroe))
{

    var vX = floor(iHeroe.x);
    var vY = floor(iHeroe.y);
    //var Hbor = view_wport[0] / 2 - TAM_CASILLA / 2;
    //var Vbor = view_hport[0] / 2 - TAM_CASILLA / 2;
    var Hbor = view_wport[0] / 2;
    var Vbor = view_hport[0] / 2;
    
    //var vistaX = view_xview[0];
    //var vistaY = view_yview[0];
    var vistaH = view_wport[0];
    var vistaV = view_hport[0];
       
    //calcula donde poner la vista
    var vistaX = vX - Hbor;
    var vistaY = vY - Vbor;
    
    if(vX &lt; Hbor) 
        vistaX  = 0;
    if(vY &lt; Vbor)
        vistaY = 0;
        
    if(vX &gt; (ROOM_MAX_X - Hbor)) 
        vistaX  = ROOM_MAX_X - vistaH;
    if(vY &gt; (ROOM_MAX_Y - Vbor))
        vistaY = ROOM_MAX_Y - vistaV;
    
    view_xview[0] = vistaX;
    view_yview[0] = vistaY;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>nCambioNivel</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Poner a los heroes en la entrada</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//poner a los heroes en la entrada

iEntrada = instance_find(oEntrada, 0); //0 = obtiene primera instancia
vX = iEntrada.x;
vY = iEntrada.y;

//busca los heroes ya creados en el menu
NumJugadores = instance_number(oHeroe);
for(i = 0; i &lt; NumJugadores; i++)
{
    iHeroe = instance_find(oHeroe, i);
    if(instance_exists(iHeroe))
    {
        iHeroe.x = vX + i; //los 4 iran la derecha del primero
        iHeroe.y = vY;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Controlar colisiones con muros, puertas, generadores y enemigos</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//colision horizontal
vX = x + hspeed;
vY = y;

if (place_meeting(vX, vY, oPuerta)) 
{
    //avanza hasta chocar del todo
    move_contact_all(direction, hspeed);
    
    hspeed = 0;       
}
if (place_meeting(vX, vY, oMuro))
{
    //avanza hasta chocar del todo
    move_contact_all(direction, hspeed);
    
    hspeed = 0;       
}

//colision vertical
vX = x;
vY = y + vspeed;

if (place_meeting(vX, vY, oPuerta)) 
{
    //avanza hasta chocar del todo
    move_contact_all(direction, vspeed);
        
    vspeed = 0;
}
if (place_meeting(vX, vY, oMuro)) 
{
    //avanza hasta chocar del todo
    move_contact_all(direction, vspeed);
     
    vspeed = 0;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Dibuja cabecera</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//dibuja llaves y pociones

vX = view_xview[1];
vY = view_yview[1];

//si solo hay una instancia del objeto Heroe bien, si hay varias hay que retocar esto!!!
//http://docs.yoyogames.com/source/dadiospice/002_reference/001_gml%20language%20overview/401_05_addressing.html

//sVida = "Vida: " + string(oHeroe.Health); //action_set_health(100); 
sPuntos = "Score: " + string(oHeroe.Puntos);
sVida = "Health: " + string(oHeroe.Vida);
sLlaves = "Keys: " + string(oHeroe.Llaves);
sPociones = "Potions: " + string(oHeroe.Pociones);
sRoom = room_get_name(room);

draw_set_font(fCabecera);
draw_set_color(c_white);

draw_text(vX + 20, vY + 20, "GAUNTLET");
draw_text(vX + 20, vY + 80, sRoom);
draw_text(vX + 20, vY + 140, sPuntos);
draw_text(vX + 20, vY + 200, sVida);
draw_text(vX + 20, vY + 260, sLlaves);
draw_text(vX + 20, vY + 320, sPociones);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
